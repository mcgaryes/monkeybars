{
    "project": {
        "name": "MonkeyBars",
        "description": "Task library that provides a simple structure for handling singular, sequential and parallel units of code.",
        "version": "0.9.14",
        "url": "http://mcgaryes.github.com/monkeybars/"
    },
    "files": {
        "../temp/monkeybars.js": {
            "name": "../temp/monkeybars.js",
            "modules": {},
            "classes": {
                "WorkerTask": 1,
                "Task": 1,
                "TaskGroup": 1,
                "ParallelTask": 1,
                "SequenceTask": 1
            },
            "fors": {
                "MonkeyBars": 1,
                "TaskEvents": 1,
                "WorkerTask": 1,
                "Task": 1,
                "TaskGroup": 1,
                "ParallelTask": 1,
                "SequenceTask": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "MonkeyBars": {
            "name": "MonkeyBars",
            "shortname": "MonkeyBars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "TaskEvents": {
            "name": "TaskEvents",
            "shortname": "TaskEvents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Task"
            ]
        },
        "WorkerTask": {
            "name": "WorkerTask",
            "shortname": "WorkerTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../temp/monkeybars.js",
            "line": 571,
            "description": "Creates a new worker representation of the task",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "task",
                    "description": "The task we're creating this worker representation from",
                    "type": "Task"
                }
            ],
            "example": [
                "\n\tvar CustomWorker = MonkeyBars.WorkerTask.extend({\n\t\tappend:function(data){\n\t\t\tthis.postMessage(\"append\",100);\n\t\t},\n\t\tdevide:function(data){\n\t\t\tthis.postMessage(\"devide\",2);\n\t\t\tthis.complete(data/2);\n\t\t}\n\t});\n\tvar task = new MonkeyBars.Task({\n\t\t...\n\t\tconcurrent:true,\n\t\tworker:{\n\t\t\tconstructor:CustomWorker,\n\t\t\thandler:function(e){\n\t\t\t\tif(e.data.type === \"append\") {\n\t\t\t\t\t...\n\t\t\t\t} else if(e.data.type === \"devide\") {\n\t\t\t\t\t...\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t...\n\t});\n\ttask.start();"
            ]
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../temp/monkeybars.js",
            "line": 697,
            "description": "The simplest form of a __MonkeyBars__ task. Once started the task executes all\nfunctionality located within the `performTask` function block. Set `logLevel`\nto see console logs during task execution.",
            "extends": "Object",
            "uses": [
                "TaskEvents"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar task = new MonkeyBars.Task({\n\t\tname:\"ExampleTask\",\n\t\tperformTask:function(){\n\t\t\tthis.complete();\n\t\t},\n\t\tonComplete:function(){\n\t\t\talert(this.name + \" is complete!\");\n\t\t}\n\t});\n\ttask.start();"
            ]
        },
        "TaskGroup": {
            "name": "TaskGroup",
            "shortname": "TaskGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../temp/monkeybars.js",
            "line": 1164,
            "description": "A task group, and extention of task, provides the building blocks for creating\na group of tasks that is inherently a task itself.",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ]
        },
        "ParallelTask": {
            "name": "ParallelTask",
            "shortname": "ParallelTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../temp/monkeybars.js",
            "line": 1556,
            "description": "A ParallelTask is a TaskGroup that runs all of its subtasks ansynchronously. Its\ncomplete functionality is run when all of its sub tasks are complete.",
            "extends": "TaskGroup",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar parallel = new MonkeyBars.ParallelTask({\n\t\tname:\"ParallelTask\",\n\t\ttasks:[new MonkeyBars.Task({\n\t\t\tperformTask:function(){\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t})],\n\t\tonComplete:function(){\n\t\t\talert(this.name + \" is complete!\");\n\t\t}\n\t});\n\tparallel.start();"
            ]
        },
        "SequenceTask": {
            "name": "SequenceTask",
            "shortname": "SequenceTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../temp/monkeybars.js",
            "line": 1764,
            "description": "A SequenceTask is a TaskGroup that runs all of its subtasks serially. Its\ncomplete functionality is run when all of its sub tasks are complete.",
            "extends": "TaskGroup",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar sequence = new MonkeyBars.SequenceTask({\n\t\tname:\"ParallelTask\",\n\t\ttasks:[new MonkeyBars.Task({\n\t\t\tperformTask:function(){\n\t\t\t\tthis.complete();\n\t\t\t}\n\t\t})],\n\t\tonComplete:function(){\n\t\t\talert(this.name + \" is complete!\");\n\t\t}\n\t});\n\tsequence.start();"
            ]
        }
    },
    "classitems": [
        {
            "file": "../temp/monkeybars.js",
            "line": 43,
            "description": "Reference to the global js object (i.e. brower's window)",
            "itemtype": "property",
            "name": "root",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 52,
            "description": "Counter used to create unique task ids",
            "itemtype": "property",
            "name": "taskIdCounter",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 61,
            "description": "List of all whitelisted properties for a task",
            "itemtype": "property",
            "name": "taskOptions",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 75,
            "description": "Object returned by module. Works as namespace for the task library.",
            "itemtype": "property",
            "name": "MonkeyBars",
            "type": "Object",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 96,
            "description": "Creates task based on the options passed.",
            "itemtype": "method",
            "name": "createTaskWithOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Task",
                "type": "Task"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 156,
            "description": "Creates an array of tasks based on the options array passed.",
            "itemtype": "method",
            "name": "createSubTasksFromTaskOptionsArray",
            "params": [
                {
                    "name": "tasks",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of tasks",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 174,
            "description": "Creates property descriptors from the passes attributes.",
            "itemtype": "method",
            "name": "createPropertyDescriptorsWithAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Property descriptors object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 193,
            "description": "Generates a unique id for each task.",
            "itemtype": "method",
            "name": "generateUniqueId",
            "params": [
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "tid",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 207,
            "description": "Determains whether the first task is dependent on the second.",
            "itemtype": "method",
            "name": "isTaskDependentOnTask",
            "params": [
                {
                    "name": "task1",
                    "description": "",
                    "type": "Task"
                },
                {
                    "name": "task2",
                    "description": "",
                    "type": "Task"
                }
            ],
            "return": {
                "description": "Whether or not the task is dependent on the other",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 232,
            "description": "Variation of http://blog.stchur.com/2007/04/06/serializing-objects-in-javascript/",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Serialized string representation of the passed object",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 283,
            "description": "Creates a blob string to be used with the web worker for concurrent task execution",
            "itemtype": "method",
            "name": "createBlobWithTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "return": {
                "description": "Blob instance",
                "type": "Blob"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 317,
            "description": "Creates a web Worker instance with the passed arguments",
            "itemtype": "method",
            "name": "createWebWorkerWithBlobAndTask",
            "params": [
                {
                    "name": "blob",
                    "description": "",
                    "type": "Blob"
                },
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "return": {
                "description": "WebWorker instance",
                "type": "Worker"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 363,
            "description": "Performs the tasks `performTask` functionality within a web worker",
            "itemtype": "method",
            "name": "performTaskFunctionalityWithWebWorker",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 385,
            "itemtype": "method",
            "name": "decorateTaskBasedOnAttributes",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                },
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 404,
            "description": "Extention functionality for various task types.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoProps",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "child Constructor function for extended task type",
                "type": "Function"
            },
            "example": [
                "\n\tvar CustomTask = MonkeyBars.Task.extend({\n\t\tname:\"CustomTask\",\n\t\tnewMethod:function(){\n\t\t\tconsole.log(\"Executing newMethod\");\n\t\t}\n\t});\n\tvar instance = new CustomTask();"
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 430,
            "description": "Simple console.log wrapper",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 447,
            "proerty": "TaskEvents",
            "type": "Object",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 457,
            "description": "Holds all references to event types, callbacks, contexts and configurations.",
            "itemtype": "property",
            "name": "_eventMap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "TaskEvents"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 470,
            "description": "Checks to see if an event is registered to this object with the passed type.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether or not the object contains the listener type",
                "type": "Boolean"
            },
            "class": "TaskEvents"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 484,
            "description": "Removes an event to the object.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TaskEvents"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 520,
            "description": "Attaches an event to the object.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "configurable",
                    "description": "Whether or not you should be able to remove this listener without passing its callback reference",
                    "type": "Boolean"
                }
            ],
            "class": "TaskEvents"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 546,
            "description": "Triggers the firing of an event on an object.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "TaskEvents"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 620,
            "description": "Post a complete message along with the data passed stating that the task\nhas completed what it needs to.",
            "itemtype": "method",
            "name": "complete",
            "class": "WorkerTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 630,
            "description": "Posts a fault message to the main thread that the task has faulted. Passes\nan error as its value.",
            "itemtype": "method",
            "name": "fault",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "WorkerTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 641,
            "description": "Posts a cancel message to the main thread that the task has been canceled.",
            "itemtype": "method",
            "name": "cancel",
            "class": "WorkerTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 650,
            "description": "Convenience method for posting messages to the main thread. You should opt into\nusing this as it is how the rest of the WorkerTask core methods communicate with\nthe main thread.",
            "itemtype": "method",
            "name": "postMessage",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "WorkerTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 671,
            "description": "Extention functionality for worker tasks. This is different than the core extend\nfunctionality because we need to make sure that all of the protoprops provided\nare available on the task because of its concurrent nature.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoProps",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "child Constructor function for extended task type",
                "type": "Function"
            },
            "class": "WorkerTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 761,
            "description": "The current state of the task",
            "itemtype": "property",
            "name": "_state",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 776,
            "description": "Whether or not to run the task concurrently through Web Workers",
            "itemtype": "property",
            "name": "concurrent",
            "type": "Boolean",
            "default": "false",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 787,
            "description": "The default logging level for tasks",
            "itemtype": "property",
            "name": "logLevel",
            "type": "Integer",
            "default": "0",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 799,
            "description": "Time in milliseconds in which a task will time out and throw a fault",
            "itemtype": "property",
            "name": "timeout",
            "type": "Integer",
            "default": "undefined",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 811,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 822,
            "description": "This object can either be simply a reference to a custom WorkerTask extention's\nconstructor. Or it can be an object with a constructor key/value pair. If it is the\nlatter then you also have the option of passing a handler function that will be run\non the `onMessage` handler of the Worker itself.",
            "itemtype": "property",
            "name": "worker",
            "type": "Object",
            "default": "undefined",
            "example": [
                "\n\tvar task = new MonkeyBars.Task({\n\t\t...\n\t\tworker:{\n\t\t\tconstructor:CustomWorker,\n\t\t\thandler:function(e){\n\t\t\t\t// called when a postMessage is posted from the task\n\t\t\t}\n\t\t},\n\t\t...\n\t});\n\tvar task = new MonkeyBars.Task({\n\t\t...\n\t\tworker:CustomWorker,\n\t\t...\n\t});"
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 856,
            "description": "This method is called during the execution lifecycle of the task. It is intentionally\nleft blank and is up to the instance to describe it functionality.",
            "itemtype": "method",
            "name": "__onStateChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current state of the task",
                    "type": "Integer"
                },
                {
                    "name": "error",
                    "description": "Message describing error",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 873,
            "description": "Calling this method cancels the task. However it is up to the instance to handle\nthe canceled state.",
            "itemtype": "method",
            "name": "cancel",
            "example": [
                "\n\tvar task = new MonkeyBars.Task({\n\t\tperformTask:function(){\n\t\t\tif(true){\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t}\n\t});\n\ttask.start();"
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 906,
            "description": "Calling this method says that the tasks execution is now complete.",
            "itemtype": "method",
            "name": "complete",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar task = new MonkeyBars.Task({\n\t\tperformTask:function(){\n\t\t\tthis.complete();\n\t\t}\n\t});\n\ttask.start();"
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 948,
            "itemtype": "method",
            "name": "destroy",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 962,
            "description": "Display name for task. Used in logging output.",
            "itemtype": "property",
            "name": "displayName",
            "type": "String",
            "return": {
                "description": "The display name of the task",
                "type": "String"
            },
            "readonly": "",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 980,
            "description": "Calling this method to fault a task. If it is part of a group task this will\nalso call the groups fault method passing the error up to the group.",
            "itemtype": "method",
            "name": "fault",
            "params": [
                {
                    "name": "error",
                    "description": "Message associated with the cause of the fault.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar task = new MonkeyBars.Task({\n\t\tperformTask:function(){\n\t\t\tvar a = \"a\";\n\t\t\tif(a != \"b\") {\n\t\t\t\tthis.fault(\"a != b\");\n\t\t\t}\n\t\t}\n\t});\n\ttask.start();"
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1015,
            "description": "Initialization functionality",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1025,
            "description": "Convenience method called when the task is canceled.",
            "itemtype": "method",
            "name": "onCancel",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1034,
            "description": "Convenience method called when the task completes.",
            "itemtype": "method",
            "name": "onComplete",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1043,
            "description": "Convenience method called when the task faults.",
            "itemtype": "method",
            "name": "onFault",
            "params": [
                {
                    "name": "error",
                    "description": "Message describing error",
                    "type": "String"
                }
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1053,
            "description": "Convenience method called when the task starts.",
            "itemtype": "method",
            "name": "onStart",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1062,
            "itemtype": "method",
            "name": "operate",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1074,
            "description": "This method is required for **simple** tasks and will throw an exception if it\nis called and not overridden. If you overwrite this method on a task group\nthen you need to make sure that you call the extended/implemented classes\noriginal prototype method (see the example below).",
            "itemtype": "method",
            "name": "performTask",
            "required": 1,
            "example": [
                "\n\tvar parallel = new MonkeyBars.ParallelTask({\n\t\t...\n\t\tperformTask:function(){\n\t\t\t// custom functionality\n\t\t\tMonkeyBars.ParallelTask.prototype.performTask.call(this);\n\t\t}\n\t\t...\n\t})"
            ],
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1098,
            "description": "Resets a task to its original state",
            "itemtype": "method",
            "name": "reset",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1110,
            "description": "Kicks off the execution of the task by calling the tasks `performTask` method.\nThis method can only be run once on a task.",
            "itemtype": "method",
            "name": "start",
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1144,
            "description": "Getter for the tasks current state. Code outside of an implementation should not set the \nstate as this is an internal property.",
            "itemtype": "method",
            "name": "state",
            "return": {
                "description": "The current state of the task",
                "type": "Integer"
            },
            "class": "Task"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1197,
            "description": "Holds all references to event types, callbacks, contexts and configurations.",
            "itemtype": "property",
            "name": "_dependencyMap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1208,
            "description": "The index of the subtasks that have completed execution.",
            "itemtype": "property",
            "name": "_currentIndex",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1220,
            "description": "An incrimented number of the tasks that have already been processed.",
            "itemtype": "property",
            "name": "_processedIndex",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1236,
            "description": "Adds a subtask to the groups queue. This is helpful when you want to add\na sub task after instantiation.",
            "itemtype": "method",
            "name": "addSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or\nan already instantiated task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar parallel = new MonkeyBars.ParallelTask();\n\tparallel.addSubTask({\n\t\tname:\"subtask\",\n\t\tperformTask:function(){\n\t\t\tthis.complete();\n\t\t}\n\t});\n\tvar simple = new MonkeyBars.simple({\n\t\tname:\"subtask\",\n\t\tperformTask:function(){\n\t\t\tthis.complete();\n\t\t}\n\t});\n\tparallel.addSubTask(simple);"
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1272,
            "description": "Adds a subtask after another task",
            "itemtype": "method",
            "name": "addSubTaskAfterTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                },
                {
                    "name": "afterTask",
                    "description": "Reference to an already added task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\tvar parallel = new MonkeyBars.ParallelTask({\n\t\ttasks:[task1,task3]\n\t});\n\tvar task2 = new MonkeyBars.Task();\n\tparallel.addTaskAfterTask(task2,task1);"
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1303,
            "description": "Very similar to `addSubTaskAfterTask` except the inject task appears\nbefore the second arguments position.",
            "itemtype": "method",
            "name": "addSubTaskBeforeTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                },
                {
                    "name": "beforeTask",
                    "description": "Reference to an already added task",
                    "type": "Object"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1329,
            "description": "Cancel the group and cancel all of its subtasks",
            "itemtype": "method",
            "name": "cancel",
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1355,
            "description": "Return a Task object, if it exists, based on the `name` passed.",
            "itemtype": "method",
            "name": "getTaskByName",
            "params": [
                {
                    "name": "name",
                    "description": "The user defined name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Task with name",
                "type": "Task"
            },
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1373,
            "description": "Return a Task object, if it exists, based on the `tid` passed.",
            "itemtype": "method",
            "name": "getTaskByTid",
            "params": [
                {
                    "name": "tid",
                    "description": "The id of the task you want",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tvar parallel = new MonkeyBars.ParallelTask({\n\t\ttasks:[task1,task3]\n\t});\n\tparallel.getTaskByTid(task1.tid);"
            ],
            "return": {
                "description": "Task with name",
                "type": "Task"
            },
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1396,
            "description": "Called when a subtask calls its cancel method. When a subtask is canceled\nany other subtasks that are dependent on the canceled task are cancled.",
            "itemtype": "method",
            "name": "onSubTaskCancel",
            "params": [
                {
                    "name": "task",
                    "description": "The task that was just canceled",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1414,
            "description": "Called when a sub task completes. Must be overridden with functionality\nprovided by the extending class.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "params": [
                {
                    "name": "task",
                    "description": "The task that just completed",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1427,
            "description": "Called when a subtask calls its fault method.",
            "itemtype": "method",
            "name": "onSubTaskFault",
            "params": [
                {
                    "name": "error",
                    "description": "Error message.",
                    "type": "String"
                },
                {
                    "name": "task",
                    "description": "The task that just completed",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1440,
            "description": "Processes a sub task and prepares it for execution. This method overwrites the\ntasks on change functionality. If you wish to have a sub task that handles\nits own change functionality then you will need to implement the partner\nconvenience methods.",
            "itemtype": "method",
            "name": "processSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Subtask to process",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1491,
            "description": "Removes a task from its group. Removing the task after it has executed will\nhave no apparent affect as it has already ran.",
            "itemtype": "method",
            "name": "removeSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "The task you wish to remove from the group.",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1508,
            "description": "Resets a task to its original state",
            "itemtype": "method",
            "name": "reset",
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1526,
            "description": "Sets dependencies for the passed task.",
            "itemtype": "method",
            "name": "setDependeciesForTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1588,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1603,
            "description": "This method is overridden from `TaskGroups` implementation because of the\nnature of a parallel task. When a task is added it should be immediately\nprocessed and started.",
            "itemtype": "method",
            "name": "addSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                }
            ],
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1625,
            "itemtype": "method",
            "name": "canProcessSubTask",
            "return": {
                "description": "Whether or not the task can process",
                "type": "Boolean"
            },
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1668,
            "description": "Checks whether or not the group has any enabled sub tasks.",
            "itemtype": "method",
            "name": "hasNoEnabledSubTasks",
            "return": {
                "description": "Has sub tasks or not",
                "type": "Boolean"
            },
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1689,
            "description": "Overridden from TaskGroup. This method is run everytime a sub task\ncompletes. When all subtasks are complete the groups complete method\nis called.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1707,
            "description": "Overridden from Task. First checks to see if there are any enabled\nsubtasks to process. If there arent the groups complete method is called.\nIf there are then the group processes all of the sub tasks it has.",
            "itemtype": "method",
            "name": "performTask",
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1724,
            "description": "Overridden from TaskGroup. Processes a sub task and prepares it for execution. This method overwrites the\ntasks on change functionality. If you wish to have a sub task that handles\nits own change functionality then you will need to implement the partner\nconvenience methods.",
            "itemtype": "method",
            "name": "processSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Subtask to process",
                    "type": "Task"
                }
            ],
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1741,
            "description": "Processes all of the sub tasks available for the group",
            "itemtype": "method",
            "name": "processSubTasks",
            "class": "ParallelTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1796,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "SequenceTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1811,
            "description": "Overriden from TaskGroup. As long as the group has not been canceled,\nwhen a sub task is canceled it simply moves on to the next task in the queue.",
            "itemtype": "method",
            "name": "onSubTaskCancel",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "SequenceTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1827,
            "description": "Overridden from TaskGroup. As long as the group has not been canceled,\nwhen a sub task completes it starts the next sibling in the queue.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "SequenceTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1848,
            "description": "Starts the next sub task in the sequence. If overriden you need to call the\nSequenceTask's prototype `performTask` method.",
            "itemtype": "method",
            "name": "performTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "SequenceTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1861,
            "description": "Starts the next task in the queue after its previous sibling has completed.",
            "itemtype": "method",
            "name": "startNextSubTask",
            "class": "SequenceTask"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1893,
            "description": "Decorator to provide for loop functionality for the task. The task executes\nas many times as referenced by the count attribute provided by the instance.",
            "itemtype": "method",
            "name": "forTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1917,
            "description": "Decorator to provide while loop functionaliy. The task executed until the `while`\nmethod returns false.",
            "itemtype": "method",
            "name": "whileTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1946,
            "description": "The task doesnt execute until the when method provided returns true.",
            "itemtype": "method",
            "name": "whenTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1970,
            "description": "Task states contstants.",
            "itemtype": "property",
            "name": "TaskStates",
            "type": "Object",
            "final": 1,
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1985,
            "description": "Task types contstants.",
            "itemtype": "property",
            "name": "TaskTypes",
            "type": "Object",
            "final": 1,
            "class": "MonkeyBars"
        },
        {
            "file": "../temp/monkeybars.js",
            "line": 1998,
            "description": "Log level contstants.",
            "itemtype": "property",
            "name": "LogLevels",
            "type": "Object",
            "final": 1,
            "class": "MonkeyBars"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: proerty",
            "line": " ../temp/monkeybars.js:447"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../temp/monkeybars.js:948"
        },
        {
            "message": "Missing item type",
            "line": " ../temp/monkeybars.js:447"
        }
    ]
}