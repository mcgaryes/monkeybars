{
    "project": {
        "name": "MonkeyBars",
        "description": "Simple structure for handling singular, sequential and parallel units of code.",
        "version": "0.0.1",
        "url": "https://github.com/mcgaryes/monkeybars"
    },
    "files": {
        "../source/monkeybars.js": {
            "name": "../source/monkeybars.js",
            "modules": {},
            "classes": {
                "Task": 1,
                "TaskGroup": 1,
                "ParallelTask": 1,
                "SequenceTask": 1
            },
            "fors": {
                "MonkeyBars": 1,
                "Task": 1,
                "TaskGroup": 1,
                "ParallelTask": 1,
                "SequenceTask": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "MonkeyBars": {
            "name": "MonkeyBars",
            "shortname": "MonkeyBars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "Task": {
            "name": "Task",
            "shortname": "Task",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../source/monkeybars.js",
            "line": 264,
            "description": "The simplest form of a __MonkeyBars__ task. Once started the task executes all \nfunctionality located within the `performTask` function block. Set `loggingEnabled`\nto see console logs during task execution.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t\t\t\n\t\t\tvar task = new MonkeyBars.Task({\n\t\t\t\tname:\"ExampleTask\",\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tthis.complete();\n\t\t\t\t},\n\t\t\t\tonComplete:function(){\n\t\t\t\t\talert(this.name + \" is complete!\");\n\t\t\t\t}\n   \t\t});\n\n   \t\ttask.start();\n"
            ]
        },
        "TaskGroup": {
            "name": "TaskGroup",
            "shortname": "TaskGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../source/monkeybars.js",
            "line": 565,
            "description": "A task group, and extention of task, provides the building blocks for creating\na group of tasks that is inherently a task itself.",
            "extends": "Task",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ]
        },
        "ParallelTask": {
            "name": "ParallelTask",
            "shortname": "ParallelTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../source/monkeybars.js",
            "line": 907,
            "description": "A ParallelTask is a TaskGroup that runs all of its subtasks ansynchronously. Its\ncomplete functionality is run when all of its sub tasks are complete.",
            "extends": "TaskGroup",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\t\t\tvar parallel = new MonkeyBars.ParallelTask({\n\t\t\t\tname:\"ParallelTask\",\n\t\t\t\ttasks:[new MonkeyBars.Task({\n\t\t\t\t\tperformTask:function(){\n\t\t\t\t\t\tthis.complete();\n\t\t\t\t\t}\n\t\t\t\t})],\n\t\t\t\tonComplete:function(){\n\t\t\t\t\talert(this.name + \" is complete!\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tparallel.start();\n"
            ]
        },
        "SequenceTask": {
            "name": "SequenceTask",
            "shortname": "SequenceTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../source/monkeybars.js",
            "line": 1050,
            "description": "A SequenceTask is a TaskGroup that runs all of its subtasks serially. Its\ncomplete functionality is run when all of its sub tasks are complete.",
            "extends": "TaskGroup",
            "is_constructor": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "List of attributes to apply to the task group",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\t\t\tvar sequence = new MonkeyBars.SequenceTask({\n\t\t\t\tname:\"ParallelTask\",\n\t\t\t\ttasks:[new MonkeyBars.Task({\n\t\t\t\t\tperformTask:function(){\n\t\t\t\t\t\tthis.complete();\n\t\t\t\t\t}\n\t\t\t\t})],\n\t\t\t\tonComplete:function(){\n\t\t\t\t\talert(this.name + \" is complete!\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsequence.start();\n"
            ]
        }
    },
    "classitems": [
        {
            "file": "../source/monkeybars.js",
            "line": 45,
            "description": "A dictionary of dependencies for sub tasks",
            "itemtype": "property",
            "name": "root",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 54,
            "description": "Counter used to create unique task ids",
            "itemtype": "property",
            "name": "taskIdCounter",
            "type": "Integer",
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 63,
            "description": "Object returned by module. Works as namespace for the task library.",
            "itemtype": "property",
            "name": "MonkeyBars",
            "type": "Object",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 85,
            "description": "Creates task based on the options passed.",
            "itemtype": "method",
            "name": "createTaskWithOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 138,
            "description": "Creates an array of tasks based on the options array passed.",
            "itemtype": "method",
            "name": "createSubTasksFromTaskOptionsArray",
            "params": [
                {
                    "name": "tasks",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 155,
            "description": "Creates property descriptors from the passes attributes.",
            "itemtype": "method",
            "name": "createPropertyDescriptorsWithAttributes",
            "params": [
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 176,
            "description": "Resets the task to its original non executed state.",
            "itemtype": "method",
            "name": "resetTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 193,
            "description": "Generates a unique id for each task.",
            "itemtype": "method",
            "name": "generateUniqueId",
            "params": [
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "tid",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 207,
            "description": "Determains whether the first task is dependent on the second.",
            "itemtype": "method",
            "name": "isTaskDependentOnTask",
            "params": [
                {
                    "name": "task1",
                    "description": "",
                    "type": "Task"
                },
                {
                    "name": "task2",
                    "description": "",
                    "type": "Task"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 233,
            "description": "Extention functionality for various task types.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoProps",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "child Constructor function for extended task type",
                "type": "Function"
            },
            "example": [
                "\n\t\t\t\n\t\t\tvar CustomTask = MonkeyBars.Task.extend({\n\t\t\t\tname:\"CustomTask\",\n\t\t\t\tnewMethod:function(){\n\t\t\t\t\tconsole.log(\"Executing newMethod\");\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar instance = new CustomTask();\n"
            ],
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 310,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 324,
            "description": "Display name for task. Used in logging output.",
            "itemtype": "property",
            "name": "displayName",
            "type": "String",
            "readonly": "",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 340,
            "description": "The current state of the task",
            "itemtype": "property",
            "name": "state",
            "type": "Integer",
            "readonly": "",
            "default": "0",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 354,
            "description": "Calling this method cancels the task. However it is up to the instance to handle \nthe canceled state.",
            "itemtype": "method",
            "name": "cancel",
            "example": [
                "\n\n\t\t\tvar task = new MonkeyBars.Task({\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tif(true){\n\t\t\t\t\t\tthis.cancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttask.start();\n"
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 384,
            "description": "Calling this method says that the tasks execution is now complete.",
            "itemtype": "method",
            "name": "complete",
            "example": [
                "\n\n\t\t\tvar task = new MonkeyBars.Task({\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tthis.complete();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttask.start();\n"
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 412,
            "description": "Calling this method to fault a task. If it is part of a group task this will \nalso call the groups fault method passing the error up to the group.",
            "itemtype": "method",
            "name": "fault",
            "params": [
                {
                    "name": "error",
                    "description": "Message associated with the cause of the fault.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\t\t\tvar task = new MonkeyBars.Task({\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tvar a = \"a\";\n\t\t\t\t\tif(a != \"b\") {\n\t\t\t\t\t\tthis.fault(\"a != b\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttask.start();\n"
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 444,
            "description": "This method is called during the execution lifecycle of the task. It is intentionally\nleft blank and is up to the instance to describe it functionality.",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "state",
                    "description": "The current state of the task",
                    "type": "Integer"
                },
                {
                    "name": "error",
                    "description": "Message describing error",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\t\t\tvar task = new MonkeyBars.Task({\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tthis.complete();\n\t\t\t\t},\n\t\t\t\tonChange:function(state,error){\n\t\t\t\t\tif(state == MonkeyBars.TaskStates.Completed){\n\t\t\t\t\t\talert(\"complete\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttask.start();\n"
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 473,
            "description": "Convenience method called when the task starts.",
            "itemtype": "method",
            "name": "onStart",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 484,
            "description": "Convenience method called when the task faults.",
            "itemtype": "method",
            "name": "onFault",
            "params": [
                {
                    "name": "error",
                    "description": "Message describing error",
                    "type": "String"
                }
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 496,
            "description": "Convenience method called when the task completes.",
            "itemtype": "method",
            "name": "onComplete",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 507,
            "description": "Convenience method called when the task is canceled.",
            "itemtype": "method",
            "name": "onCancel",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 518,
            "description": "This method is required for **simple** tasks and will throw an exception if it \nis called and not overridden. If you overwrite this method on a task group\nthen you need to make sure that you call the extended/implemented classes\noriginal prototype method (see the example below).",
            "itemtype": "method",
            "name": "performTask",
            "required": 1,
            "example": [
                "\n\n\t\t\tvar parallel = new MonkeyBars.ParallelTask({\n\t\t\t\t...\n\t\t\t\tperformTask:function(){\n\t\t\t\t\t// custom functionality\n\t\t\t\t\tMonkeyBars.ParallelTask.prototype.performTask.call(this);\n\t\t\t\t}\n\t\t\t\t...\n\t\t\t})\n"
            ],
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 544,
            "description": "Kicks off the execution of the task by calling the tasks `performTask` method. \nThis method can only be run once on a task.",
            "itemtype": "method",
            "name": "start",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 597,
            "description": "The index of the subtasks that have completed execution.",
            "itemtype": "property",
            "name": "currentIndex",
            "type": "Integer",
            "readonly": "",
            "default": "0",
            "class": "Task"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 611,
            "description": "Adds a subtask to the groups queue. This is helpful when you want to add\na sub task after instantiation.",
            "itemtype": "method",
            "name": "addSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or\nan already instantiated task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\t\t\tvar parallel = new MonkeyBars.ParallelTask();\n\t\t\t\n\t\t\tparallel.addSubTask({\n\t\t\t\tname:\"subtask\",\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tthis.complete();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar simple = new MonkeyBars.simple({\n\t\t\t\tname:\"subtask\",\n\t\t\t\tperformTask:function(){\n\t\t\t\t\tthis.complete();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tparallel.addSubTask(simple);\n"
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 649,
            "description": "description",
            "itemtype": "method",
            "name": "addSubTaskAfterTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                },
                {
                    "name": "afterTask",
                    "description": "Reference to an already added task",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n\t\t\tvar parallel = new MonkeyBars.ParallelTask({\n\t\t\t\ttasks:[task1,task3]\n\t\t\t});\n\n\t\t\tvar task2 = new MonkeyBars.Task();\n\t\t\tparallel.addTaskAfterTask(task2,task1);\n"
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 677,
            "description": "Very similar to `addSubTaskAfterTask` except the inject task appears\nbefore the second arguments position.",
            "itemtype": "method",
            "name": "addSubTaskBeforeTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                },
                {
                    "name": "beforeTask",
                    "description": "Reference to an already added task",
                    "type": "Object"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 697,
            "description": "Called when a sub task completes. Must be overridden with functionality \nprovided by the extending class.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 709,
            "description": "Called when a subtask calls its fault method.",
            "itemtype": "method",
            "name": "onSubTaskFault",
            "params": [
                {
                    "name": "error",
                    "description": "Error message.",
                    "type": "String"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 721,
            "description": "Called when a subtask calls its cancel method. When a subtask is canceled\nany other subtasks that are dependent on the canceled task are cancled.",
            "itemtype": "method",
            "name": "onSubTaskCancel",
            "params": [
                {
                    "name": "task",
                    "description": "The task that was just cancled",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 740,
            "description": "Processes a sub task and prepares it for execution. This method overwrites the\ntasks on change functionality. If you wish to have a sub task that handles \nits own change functionality then you will need to implement the partner \nconvenience methods.",
            "itemtype": "method",
            "name": "processSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Subtask to process",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 777,
            "description": "Removes a task from its group. Removing the task after it has executed will\nhave no apparent affect as it has already ran.",
            "itemtype": "method",
            "name": "removeSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "The task you wish to remove from the group.",
                    "type": "Task"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 794,
            "description": "Return a Task object, if it exists, based on the `tid` passed.",
            "itemtype": "method",
            "name": "getTaskByTid",
            "params": [
                {
                    "name": "tid",
                    "description": "The id of the task you want",
                    "type": "String"
                }
            ],
            "example": [
                "\n\n\t\t\tvar parallel = new MonkeyBars.ParallelTask({\n\t\t\t\ttasks:[task1,task3]\n\t\t\t});\n\n\t\t\tparallel.getTaskByTid(task1.tid);\n"
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 819,
            "description": "Return a Task object, if it exists, based on the `id` passed.",
            "itemtype": "method",
            "name": "getTaskById",
            "params": [
                {
                    "name": "id",
                    "description": "The user defined id",
                    "type": "String"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 836,
            "description": "Return a Task object, if it exists, based on the `name` passed.",
            "itemtype": "method",
            "name": "getTaskByName",
            "params": [
                {
                    "name": "name",
                    "description": "The user defined name",
                    "type": "String"
                }
            ],
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 853,
            "description": "Cancel the group and cancel all of its subtasks",
            "itemtype": "method",
            "name": "cancel",
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 881,
            "description": "Sets dependencies for the passed task.",
            "itemtype": "method",
            "name": "setDependeciesForTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "static": 1,
            "class": "TaskGroup"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 942,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 956,
            "description": "Checks whether or not the group has any enabled sub tasks.",
            "itemtype": "method",
            "name": "hasNoEnabledSubTasks",
            "return": {
                "description": "Has sub tasks or not",
                "type": "Boolean"
            },
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 975,
            "description": "Processes all of the sub tasks available for the group",
            "itemtype": "method",
            "name": "processSubTasks",
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 992,
            "description": "This method is overridden from `TaskGroups` implementation because of the \nnature of a parallel task. When a task is added it should be immediately\nprocessed and started.",
            "itemtype": "method",
            "name": "addSubTask",
            "params": [
                {
                    "name": "task",
                    "description": "Either an object containing attributes of a task or",
                    "type": "Object"
                }
            ],
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1012,
            "description": "Overridden from TaskGroup. This method is run everytime a sub task\ncompletes. When all subtasks are complete the groups complete method\nis called.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1030,
            "description": "Overridden from Task. First checks to see if there are any enabled\nsubtasks to process. If there arent the groups complete method is called.\nIf there are then the group processes all of the sub tasks it has.",
            "itemtype": "method",
            "name": "performTask",
            "class": "ParallelTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1085,
            "description": "The kind of task",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "SequenceTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1099,
            "description": "Starts the next task in the queue after its previous sibling has completed.",
            "itemtype": "method",
            "name": "startNextSubTask",
            "class": "SequenceTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1118,
            "description": "Overridden from TaskGroup. As long as the group has not been canceled,\nwhen a sub task completes it starts the next sibling in the queue.",
            "itemtype": "method",
            "name": "onSubTaskComplete",
            "class": "SequenceTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1133,
            "description": "Overriden from TaskGroup. As long as the group has not been canceled,\nwhen a sub task is canceled it simply moves on to the next task in the queue.",
            "itemtype": "method",
            "name": "onSubTaskCancel",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "SequenceTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1149,
            "description": "Starts the next sub task in the sequence. If overriden you need to call the \nSequenceTask's prototype `performTask` method.",
            "itemtype": "method",
            "name": "performTask",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Task"
                }
            ],
            "class": "SequenceTask"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1172,
            "description": "Decorator to provide for loop functionality for the task. The task executes\nas many times as referenced by the count attribute provided by the instance.",
            "itemtype": "method",
            "name": "ForTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1196,
            "description": "Decorator to provide while loop functionaliy. The task executed until the `while`\nmethod returns false.",
            "itemtype": "method",
            "name": "WhileTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1224,
            "description": "The task doesnt execute until the when method provided returns true.",
            "itemtype": "method",
            "name": "WhenTaskDecorator",
            "params": [
                {
                    "name": "task",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1249,
            "description": "description needed",
            "itemtype": "property",
            "name": "TaskStates",
            "type": "Object",
            "static": 1,
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1265,
            "description": "description needed",
            "itemtype": "property",
            "name": "TaskTypes",
            "type": "Object",
            "static": 1,
            "class": "MonkeyBars"
        },
        {
            "file": "../source/monkeybars.js",
            "line": 1279,
            "description": "description needed",
            "itemtype": "property",
            "name": "TaskDecorators",
            "type": "Object",
            "static": 1,
            "class": "MonkeyBars"
        }
    ],
    "warnings": []
}