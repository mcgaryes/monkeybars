(function(){var e=this,t=0,n=1,r=2,i=3,s=4,o="for",u="parallel",a="sequence",f="simple",l=function(e){var t;if(!e)throw"No options passed";var n=e.type,r=e.tasks;return n?n==f?h.extend(e):n==a?v.extend(e):n==u?d.extend(e):n==o?m.extend(e):t:r?v.extend(e):e.count?m.extend(e):h.extend(e)},c=function(e){var t=[];if(e)for(var n=0;n<e.length;n++)t.push(l(e[n]));return t},h={prototype:{type:f,name:f,state:t,cancel:function(){if(this.state>n)return;this.state=r,this.loggingEnabled&&console.log("Canceled:"+this.name),this.onChange(this.state),this.onCancel()},complete:function(){if(this.state>n)return;this.state=s,this.loggingEnabled&&console.log("Completed:"+this.name),this.executionTime=(new Date).getTime()-this.startTime,this.onComplete(),this.onChange(this.state)},fault:function(e){if(this.state>=r)return;this.state=i,this.loggingEnabled&&console.log("Faulted:"+this.name),this.onChange(this.state,e),this.onFault(e)},onChange:function(e,t){},onStart:function(){},onFault:function(e){},onComplete:function(){},onCancel:function(){},performTask:function(){throw"'performTask' method should be overridden"},start:function(){if(this.state>=n)return;this.startTime=(new Date).getTime(),this.state=n,this.loggingEnabled&&console.log("Started:"+this.name),this.onChange(this.state),this.performTask(),this.onStart()}},extend:function(e){var t=h.prototype,n={};for(var r in t)n[r]=t[r];for(var r in e)n[r]=e[r];return n}},p={prototype:{addSubTask:function(e){e.id||(e=l(e)),this.tasks.push(e)},addSubTaskAfterTask:function(e,t){if(!e||this.state==r)return;e.id||(e=l(e));var n=this.tasks.indexOf(t);this.tasks.splice(n,0,e)},onSubTaskComplete:function(){throw"This is an abstract method and must be implemented in a subclass."},onSubTaskFault:function(e){this.fault(e)},onSubTaskCancel:function(e){this.cancel()},processSubTask:function(e){if(!e)throw"You cannot process a task with a nil value.";return e.state==r?(console.log("task is canceled"),this.onSubTaskCancel(e),!0):(e.group=this,e.loggingEnabled=this.loggingEnabled,e.onChange=function(t,n){t==s?this.group.onSubTaskComplete():t==i?this.group.onSubTaskFault(n):t==r&&this.group.onSubTaskCancel(e)},e.start(),!1)},removeSubTask:function(e){if(!e)return;var t=this.tasks.indexOf(e);this.tasks.splice(t,1)}},extend:function(e){var t=h.extend(p.prototype),n={};for(var r in t)n[r]=t[r];for(var r in e)n[r]=e[r];return n}},d={prototype:{type:u,name:u,currentIndex:0,hasNoEnabledSubTasks:function(){for(var e=0;e<this.tasks.length;e++){var t=this.tasks[e];if(t.state!=r)return!1}return!0},processSubTasks:function(){for(var e=0;e<this.tasks.length;e++){var t=this.tasks[e];this.currentIndex++,this.processSubTask(t)}},addSubTask:function(e){if(!e||e.state==r)return;this.currentIndex++,e.id||(e=new h(e)),this.tasks.push(e),this.processSubTask(e)},onSubTaskComplete:function(){this.currentIndex--<=1&&this.complete()},performTask:function(){this.hasNoEnabledSubTasks()?this.complete():this.processSubTasks()}},extend:function(e){var t=p.extend(d.prototype),n={};for(var r in t)n[r]=t[r];e||(e={}),e.tasks=c(e.tasks);for(var r in e)n[r]=e[r];return n}},v={prototype:{type:a,name:a,currentIndex:0,startNextSubTask:function(){if(this.state>=r)return;if(this.tasks&&this.currentIndex<this.tasks.length){var e=this.processSubTask(this.tasks[this.currentIndex++]);e&&this.startNextSubTask()}else this.complete()},onSubTaskComplete:function(){if(this.state==r)return;this.startNextSubTask()},onSubTaskCancel:function(e){this.state!=r&&this.startNextSubTask()},performTask:function(){this.startNextSubTask()}},extend:function(e){var t=p.extend(v.prototype),n={};for(var r in t)n[r]=t[r];e||(e={}),e.tasks=c(e.tasks);for(var r in e)n[r]=e[r];return n}},m={prototype:{count:1,currentIndex:0,complete:function(){this.currentIndex!=this.count-1?(this.state=t,this.currentIndex++,this.loggingEnabled&&console.log("Completed:"+this.name+" "+this.currentIndex+" out of "+this.count+" times"),this.performTask()):h.prototype.complete.call(this)}},extend:function(e){var t=h.extend(m.prototype),n={};for(var r in t)n[r]=t[r];for(var r in e)n[r]=e[r];return n}};e.MonkeyBars={ForTask:m,ParallelTask:d,SequenceTask:v,Task:h,TaskStates:{Initialized:t,Started:n,Canceled:r,Faulted:i,Completed:s},TaskTypes:{Parallel:u,Sequence:a,Simple:f,For:o}}})(this);